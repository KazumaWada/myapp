# version: 2.1 # Use 2.1 to enable using orbs and other features.

# # Declare the orbs that we'll use in our config.
# # read more about orbs: https://circleci.com/docs/2.0/using-orbs/
# orbs:
#   ruby: circleci/ruby@1.0
#   node: circleci/node@2

# jobs:
#   build: # our first job, named "build"
#     docker:
#       - image: cimg/ruby:2.6.6-node # use a tailored CircleCI docker image.
#         auth:
#           username: mydockerhub-user
#           password: $DOCKERHUB_PASSWORD # context / project UI env-var reference
#     steps:
#       - checkout # pull down our git code.
#       - ruby/install-deps # use the ruby orb to install dependencies
#       # use the node orb to install our packages
#       # specifying that we use `yarn` and to cache dependencies with `yarn.lock`
#       # learn more: https://circleci.com/docs/2.0/caching/
#       - node/install-packages:
#           pkg-manager: yarn
#           cache-key: "yarn.lock"

#   test: # our next job, called "test"
#     # we run "parallel job containers" to enable speeding up our tests;
#     # this splits our tests across multiple containers.
#     parallelism: 3
#     # here we set TWO docker images.
#     docker:
#       - image: cimg/ruby:2.6.6-node # this is our primary docker image, where step commands run.
#         auth:
#           username: mydockerhub-user
#           password: $DOCKERHUB_PASSWORD # context / project UI env-var reference
#       - image: circleci/mysql:8.0
#         auth:
#           username: mydockerhub-user
#           password: $DOCKERHUB_PASSWORD # context / project UI env-var reference
#         environment: # add POSTGRES environment variables.
#           # POSTGRES_USER: circleci-demo-ruby
#           # POSTGRES_DB: rails_blog_test
#           # POSTGRES_PASSWORD: ""
#           MYSQL_ROOT_PASSWORD: password
#           MYSQL_USER: ci-test-user
#           MYSQL_PASSWORD: password
#     # environment variables specific to Ruby/Rails, applied to the primary container.
#     environment:
#       BUNDLE_JOBS: "3"
#       BUNDLE_RETRY: "3"
#       PGHOST: 127.0.0.1
#       PGUSER: circleci-demo-ruby
#       PGPASSWORD: ""
#       RAILS_ENV: test
#     # A series of steps to run, some are similar to those in "build".
#     steps:
#       - checkout
#       - ruby/install-deps
#       - node/install-packages:
#           pkg-manager: yarn
#           cache-key: "yarn.lock"
#       # Here we make sure that the secondary container boots
#       # up before we run operations on the database.
#       - run:
#           name: Wait for DB
#           command: dockerize -wait tcp://localhost:5432 -timeout 1m
#       - run:
#           name: Database setup
#           command: bundle exec rails db:schema:load --trace
#       # Run rspec in parallel
#       - ruby/rspec-test

version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/ruby:2.6.6-node-browsers
        environment:
          RAILS_ENV: test
          DB_HOST: 127.0.0.1
          DB_USERNAME: ci-test
          DB_PASSWORD: password

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: circleci/mysql:8.0

    working_directory: ~/myapp

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "Gemfile.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            bundle install --jobs=4 --retry=3 --path vendor/bundle

      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}

      - run:
          name: Wait for DB
          command: dockerize -wait tcp://127.0.0.1:3306 -timeout 120s

      # Database setup
      - run: bundle exec rake db:create
      - run: bundle exec rake db:schema:load

      # run tests!
      - run:
          name: run tests
          command: |
            mkdir /tmp/test-results
            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)"

            bundle exec rspec --format progress \
                            --format RspecJunitFormatter \
                            --out /tmp/test-results/rspec.xml \
                            --format progress \
                            $TEST_FILES

      # collect reports
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results

      # run rubocop
      - run:
          name: run rubocop
          command: bundle exec rubocop
